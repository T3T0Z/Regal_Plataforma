// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Regal_Plataforma.Models.BDD;

public partial class REGAL_ASISTENCIAContext : DbContext
{
    public REGAL_ASISTENCIAContext(DbContextOptions<REGAL_ASISTENCIAContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AsignacionTrabajo> AsignacionTrabajos { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<DetallesSiniestro> DetallesSiniestros { get; set; }

    public virtual DbSet<Dialog> Dialogs { get; set; }

    public virtual DbSet<Direccion> Direccions { get; set; }

    public virtual DbSet<EstadoObra> EstadoObras { get; set; }

    public virtual DbSet<EstadosTrabajo> EstadosTrabajos { get; set; }

    public virtual DbSet<Gremio> Gremios { get; set; }

    public virtual DbSet<NotasCliente> NotasClientes { get; set; }

    public virtual DbSet<NotasObra> NotasObras { get; set; }

    public virtual DbSet<NotasSiniestro> NotasSiniestros { get; set; }

    public virtual DbSet<NotasTrabajo> NotasTrabajos { get; set; }

    public virtual DbSet<NotasUsuario> NotasUsuarios { get; set; }

    public virtual DbSet<Obra> Obras { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDato> OrderDatos { get; set; }

    public virtual DbSet<Persona> Personas { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Siniestro> Siniestros { get; set; }

    public virtual DbSet<Telefono> Telefonos { get; set; }

    public virtual DbSet<TiposCliente> TiposClientes { get; set; }

    public virtual DbSet<TiposIntervencione> TiposIntervenciones { get; set; }

    public virtual DbSet<Trabajo> Trabajos { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AsignacionTrabajo>(entity =>
        {
            entity.HasKey(e => e.AsignacionTrabajosPk);

            entity.ToTable("ASIGNACION_TRABAJOS");

            entity.Property(e => e.AsignacionTrabajosPk).HasColumnName("AsignacionTrabajos_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.EstadoAsignacionTrabajoPk).HasColumnName("EstadoAsignacionTrabajo_PK");
            entity.Property(e => e.FechaAsignada).HasColumnType("datetime");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaEjecucion).HasColumnType("datetime");
            entity.Property(e => e.TrabajoPk).HasColumnName("Trabajo_PK");
            entity.Property(e => e.UsuarioCreadorPk).HasColumnName("UsuarioCreador_PK");
            entity.Property(e => e.UsuarioOperarioPk).HasColumnName("UsuarioOperario_PK");

            entity.HasOne(d => d.UsuarioCreadorPkNavigation).WithMany(p => p.AsignacionTrabajoUsuarioCreadorPkNavigations)
                .HasForeignKey(d => d.UsuarioCreadorPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASIGNACION_TRABAJOS_USUARIOS");

            entity.HasOne(d => d.UsuarioOperarioPkNavigation).WithMany(p => p.AsignacionTrabajoUsuarioOperarioPkNavigations)
                .HasForeignKey(d => d.UsuarioOperarioPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASIGNACION_TRABAJOS_USUARIOS1");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.ClientePk);

            entity.ToTable("CLIENTES");

            entity.Property(e => e.ClientePk).HasColumnName("Cliente_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.Correo)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DireccionPk).HasColumnName("Direccion_PK");
            entity.Property(e => e.DocIdentidad)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Movil)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Ncuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NCuenta");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NombreAdministracion)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Notas).IsUnicode(false);
            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TipoClientePk).HasColumnName("TipoCliente_PK");

            entity.HasOne(d => d.DireccionPkNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.DireccionPk)
                .HasConstraintName("FK_CLIENTES_DIRECCION");

            entity.HasOne(d => d.TipoClientePkNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.TipoClientePk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTES_TIPOS_CLIENTES");
        });

        modelBuilder.Entity<DetallesSiniestro>(entity =>
        {
            entity.HasKey(e => e.DetallesSiniestroPk).HasName("PK__DETALLES__EB69EFCA00956294");

            entity.ToTable("DETALLES_SINIESTRO");

            entity.Property(e => e.DetallesSiniestroPk).HasColumnName("DetallesSiniestro_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.Causa).IsUnicode(false);
            entity.Property(e => e.Condiciones).IsUnicode(false);
            entity.Property(e => e.Descripcion).IsUnicode(false);
            entity.Property(e => e.FechaApendice).HasColumnType("datetime");
            entity.Property(e => e.FechaAperturaSiniestro).HasColumnType("datetime");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaEfecto).HasColumnType("datetime");
            entity.Property(e => e.FechaOcurrencia).HasColumnType("datetime");
            entity.Property(e => e.NombreRamo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NumeroPoliza)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumeroSiniestro)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ramo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Dialog>(entity =>
        {
            entity.HasKey(e => e.DialogPk);

            entity.ToTable("DIALOG");

            entity.Property(e => e.DialogPk).HasColumnName("Dialog_PK");
            entity.Property(e => e.AnswerRequired)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HasDocumentation)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.IdDialog)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdOrder)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdParentDialog)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdProfessional)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Issue)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Message).IsUnicode(false);
            entity.Property(e => e.OrderPk).HasColumnName("Order_PK");
            entity.Property(e => e.Receiver)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Transmitter)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.OrderPkNavigation).WithMany(p => p.Dialogs)
                .HasForeignKey(d => d.OrderPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIALOG_ORDER");
        });

        modelBuilder.Entity<Direccion>(entity =>
        {
            entity.HasKey(e => e.DireccionPk).HasName("PK__DIRECCIO__DAA854C99DCEF623");

            entity.ToTable("DIRECCION");

            entity.Property(e => e.DireccionPk).HasColumnName("Direccion_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.CodigoPais)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPostalInternacional)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CodigoProvincia)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.NombreVia)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Numero)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pais)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Poblacion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PoblacionInternacional)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Provincia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RestoVia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TipoVia)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EstadoObra>(entity =>
        {
            entity.HasKey(e => e.EstadoObrasPk);

            entity.ToTable("ESTADO_OBRAS");

            entity.Property(e => e.EstadoObrasPk).HasColumnName("EstadoObras_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Estado)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<EstadosTrabajo>(entity =>
        {
            entity.HasKey(e => e.EstadoTrabajoPk);

            entity.ToTable("ESTADOS_TRABAJOS");

            entity.Property(e => e.EstadoTrabajoPk).HasColumnName("EstadoTrabajo_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Gremio>(entity =>
        {
            entity.HasKey(e => e.GremioPk);

            entity.ToTable("GREMIOS");

            entity.Property(e => e.GremioPk).HasColumnName("Gremio_PK");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NotasCliente>(entity =>
        {
            entity.HasKey(e => e.NotasClientesPk);

            entity.ToTable("NOTAS_CLIENTES");

            entity.Property(e => e.NotasClientesPk).HasColumnName("NotasClientes_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.ClientePk).HasColumnName("Cliente_PK");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Nota)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.UsuarioPk).HasColumnName("Usuario_PK");

            entity.HasOne(d => d.ClientePkNavigation).WithMany(p => p.NotasClientes)
                .HasForeignKey(d => d.ClientePk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTAS_CLIENTES_CLIENTES");

            entity.HasOne(d => d.UsuarioPkNavigation).WithMany(p => p.NotasClientes)
                .HasForeignKey(d => d.UsuarioPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTAS_CLIENTES_USUARIOS");
        });

        modelBuilder.Entity<NotasObra>(entity =>
        {
            entity.HasKey(e => e.NotasObrasPk);

            entity.ToTable("NOTAS_OBRAS");

            entity.Property(e => e.NotasObrasPk).HasColumnName("NotasObras_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Nota)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.ObraPk).HasColumnName("Obra_PK");
            entity.Property(e => e.UsuarioPk).HasColumnName("Usuario_PK");

            entity.HasOne(d => d.ObraPkNavigation).WithMany(p => p.NotasObras)
                .HasForeignKey(d => d.ObraPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTAS_OBRAS_OBRAS");

            entity.HasOne(d => d.UsuarioPkNavigation).WithMany(p => p.NotasObras)
                .HasForeignKey(d => d.UsuarioPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTAS_OBRAS_USUARIOS");
        });

        modelBuilder.Entity<NotasSiniestro>(entity =>
        {
            entity.HasKey(e => e.NotasSiniestroPk).HasName("PK_NotasSiniestros");

            entity.ToTable("NOTAS_SINIESTROS");

            entity.Property(e => e.NotasSiniestroPk).HasColumnName("NotasSiniestro_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Nota)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.SiniestroPk).HasColumnName("Siniestro_PK");
            entity.Property(e => e.UsuarioPk).HasColumnName("Usuario_PK");

            entity.HasOne(d => d.SiniestroPkNavigation).WithMany(p => p.NotasSiniestros)
                .HasForeignKey(d => d.SiniestroPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTAS_SINIESTROS_SINIESTRO");

            entity.HasOne(d => d.UsuarioPkNavigation).WithMany(p => p.NotasSiniestros)
                .HasForeignKey(d => d.UsuarioPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTAS_SINIESTROS_NOTAS_SINIESTROS");
        });

        modelBuilder.Entity<NotasTrabajo>(entity =>
        {
            entity.HasKey(e => e.NotasTrabajoPk);

            entity.ToTable("NOTAS_TRABAJOS");

            entity.Property(e => e.NotasTrabajoPk).HasColumnName("NotasTrabajo_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Nota)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.TrabajoPk).HasColumnName("Trabajo_PK");
            entity.Property(e => e.UsuarioPk).HasColumnName("Usuario_PK");

            entity.HasOne(d => d.TrabajoPkNavigation).WithMany(p => p.NotasTrabajos)
                .HasForeignKey(d => d.TrabajoPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTAS_TRABAJOS_TRABAJOS");

            entity.HasOne(d => d.UsuarioPkNavigation).WithMany(p => p.NotasTrabajos)
                .HasForeignKey(d => d.UsuarioPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTAS_TRABAJOS_USUARIOS");
        });

        modelBuilder.Entity<NotasUsuario>(entity =>
        {
            entity.HasKey(e => e.NotasUsuarioPk);

            entity.ToTable("NOTAS_USUARIOS");

            entity.Property(e => e.NotasUsuarioPk).HasColumnName("NotasUsuario_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Nota)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.UcreadorPk).HasColumnName("UCreador_PK");
            entity.Property(e => e.UsuarioPk).HasColumnName("Usuario_PK");

            entity.HasOne(d => d.UcreadorPkNavigation).WithMany(p => p.NotasUsuarioUcreadorPkNavigations)
                .HasForeignKey(d => d.UcreadorPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTAS_USUARIOS_USUARIOS1");

            entity.HasOne(d => d.UsuarioPkNavigation).WithMany(p => p.NotasUsuarioUsuarioPkNavigations)
                .HasForeignKey(d => d.UsuarioPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTAS_USUARIOS_USUARIOS");
        });

        modelBuilder.Entity<Obra>(entity =>
        {
            entity.HasKey(e => e.ObraPk);

            entity.ToTable("OBRAS");

            entity.Property(e => e.ObraPk).HasColumnName("Obra_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.ClientePk).HasColumnName("Cliente_PK");
            entity.Property(e => e.DireccionPk).HasColumnName("Direccion_PK");
            entity.Property(e => e.EstadoObraPk).HasColumnName("EstadoObra_PK");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.FechaAsignada).HasColumnType("datetime");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaFin).HasColumnType("datetime");
            entity.Property(e => e.FechaFinAsignada).HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UgestorPk).HasColumnName("UGestor_PK");

            entity.HasOne(d => d.ClientePkNavigation).WithMany(p => p.Obras)
                .HasForeignKey(d => d.ClientePk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OBRAS_CLIENTES");

            entity.HasOne(d => d.DireccionPkNavigation).WithMany(p => p.Obras)
                .HasForeignKey(d => d.DireccionPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OBRAS_DIRECCION");

            entity.HasOne(d => d.EstadoObraPkNavigation).WithMany(p => p.Obras)
                .HasForeignKey(d => d.EstadoObraPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OBRAS_ESTADO_OBRAS");

            entity.HasOne(d => d.UgestorPkNavigation).WithMany(p => p.Obras)
                .HasForeignKey(d => d.UgestorPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OBRAS_USUARIOS");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderPk);

            entity.ToTable("ORDER");

            entity.Property(e => e.OrderPk).HasColumnName("Order_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.Company)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IdClaim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Id_Claim");
            entity.Property(e => e.IdOrder)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Id_Order");
            entity.Property(e => e.IdProfesional)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Id_Profesional");
            entity.Property(e => e.OperationDate)
                .HasColumnType("datetime")
                .HasColumnName("Operation_Date");
            entity.Property(e => e.OperationDescription)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Operation_Description");
            entity.Property(e => e.OperationType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Operation_Type");
        });

        modelBuilder.Entity<OrderDato>(entity =>
        {
            entity.HasKey(e => e.OrderDatosPk).HasName("PK__ORDER_DA__75FB72412035155D");

            entity.ToTable("ORDER_DATOS");

            entity.Property(e => e.OrderDatosPk)
                .ValueGeneratedNever()
                .HasColumnName("OrderDatos_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.DireccionPk).HasColumnName("Direccion_PK");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GremioPk)
                .HasDefaultValue(1)
                .HasColumnName("Gremio_PK");
            entity.Property(e => e.Observaciones).IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderDateClose).HasColumnType("datetime");
            entity.Property(e => e.OrderPk).HasColumnName("Order_PK");
            entity.Property(e => e.PafectadaPk).HasColumnName("PAfectada_PK");
            entity.Property(e => e.PagentePolizaPk).HasColumnName("PAgentePoliza_PK");
            entity.Property(e => e.PaseguradoPk).HasColumnName("PAsegurado_PK");
            entity.Property(e => e.PcontactoPk).HasColumnName("PContacto_PK");
            entity.Property(e => e.PinterlocutorPk).HasColumnName("PInterlocutor_PK");
            entity.Property(e => e.PprofesionalPk).HasColumnName("PProfesional_PK");
            entity.Property(e => e.PtomadorPk).HasColumnName("PTomador_PK");
            entity.Property(e => e.PtramitadorPk).HasColumnName("PTramitador_PK");
            entity.Property(e => e.RamoPoliza)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SiniestroPk).HasColumnName("Siniestro_PK");

            entity.HasOne(d => d.DireccionPkNavigation).WithMany(p => p.OrderDatos)
                .HasForeignKey(d => d.DireccionPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORDER_DATOS_DIRECCION");

            entity.HasOne(d => d.GremioPkNavigation).WithMany(p => p.OrderDatos)
                .HasForeignKey(d => d.GremioPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORDER_DATOS_GREMIOS");

            entity.HasOne(d => d.OrderPkNavigation).WithMany(p => p.OrderDatos)
                .HasForeignKey(d => d.OrderPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORDER_DATOS_ORDER");

            entity.HasOne(d => d.PafectadaPkNavigation).WithMany(p => p.OrderDatoPafectadaPkNavigations)
                .HasForeignKey(d => d.PafectadaPk)
                .HasConstraintName("FK_ORDER_DATOS_PERSONAS");

            entity.HasOne(d => d.PagentePolizaPkNavigation).WithMany(p => p.OrderDatoPagentePolizaPkNavigations)
                .HasForeignKey(d => d.PagentePolizaPk)
                .HasConstraintName("FK_ORDER_DATOS_PERSONAS1");

            entity.HasOne(d => d.PaseguradoPkNavigation).WithMany(p => p.OrderDatoPaseguradoPkNavigations)
                .HasForeignKey(d => d.PaseguradoPk)
                .HasConstraintName("FK_ORDER_DATOS_PERSONAS2");

            entity.HasOne(d => d.PcontactoPkNavigation).WithMany(p => p.OrderDatoPcontactoPkNavigations)
                .HasForeignKey(d => d.PcontactoPk)
                .HasConstraintName("FK_ORDER_DATOS_PERSONAS3");

            entity.HasOne(d => d.PinterlocutorPkNavigation).WithMany(p => p.OrderDatoPinterlocutorPkNavigations)
                .HasForeignKey(d => d.PinterlocutorPk)
                .HasConstraintName("FK_ORDER_DATOS_PERSONAS4");

            entity.HasOne(d => d.PprofesionalPkNavigation).WithMany(p => p.OrderDatoPprofesionalPkNavigations)
                .HasForeignKey(d => d.PprofesionalPk)
                .HasConstraintName("FK_ORDER_DATOS_PERSONAS5");

            entity.HasOne(d => d.PtomadorPkNavigation).WithMany(p => p.OrderDatoPtomadorPkNavigations)
                .HasForeignKey(d => d.PtomadorPk)
                .HasConstraintName("FK_ORDER_DATOS_PERSONAS6");

            entity.HasOne(d => d.PtramitadorPkNavigation).WithMany(p => p.OrderDatoPtramitadorPkNavigations)
                .HasForeignKey(d => d.PtramitadorPk)
                .HasConstraintName("FK_ORDER_DATOS_PERSONAS7");

            entity.HasOne(d => d.SiniestroPkNavigation).WithMany(p => p.OrderDatos)
                .HasForeignKey(d => d.SiniestroPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORDER_DATOS_SINIESTRO");
        });

        modelBuilder.Entity<Persona>(entity =>
        {
            entity.HasKey(e => e.PersonaPk).HasName("PK__PERSONAS__2C93AAE6821922CA");

            entity.ToTable("PERSONAS");

            entity.Property(e => e.PersonaPk).HasColumnName("Persona_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.Apellido1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Apellido2)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CarneIdentidad)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DireccionPk).HasColumnName("Direccion_PK");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Nacionalidad)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NombreCompany)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NumeroTelefono2Pk).HasColumnName("NumeroTelefono2_PK");
            entity.Property(e => e.NumeroTelefonoPk).HasColumnName("NumeroTelefono_PK");
            entity.Property(e => e.TipoPersona)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DireccionPkNavigation).WithMany(p => p.Personas)
                .HasForeignKey(d => d.DireccionPk)
                .HasConstraintName("FK_PERSONAS_DIRECCION");

            entity.HasOne(d => d.NumeroTelefono2PkNavigation).WithMany(p => p.PersonaNumeroTelefono2PkNavigations)
                .HasForeignKey(d => d.NumeroTelefono2Pk)
                .HasConstraintName("FK_PERSONAS_TELEFONO1");

            entity.HasOne(d => d.NumeroTelefonoPkNavigation).WithMany(p => p.PersonaNumeroTelefonoPkNavigations)
                .HasForeignKey(d => d.NumeroTelefonoPk)
                .HasConstraintName("FK_PERSONAS_TELEFONO");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RolPk);

            entity.ToTable("ROLES");

            entity.Property(e => e.RolPk).HasColumnName("Rol_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Rol)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Siniestro>(entity =>
        {
            entity.HasKey(e => e.SiniestroPk).HasName("PK__ORDER_DE__02B79E343B0AE9E7");

            entity.ToTable("SINIESTRO");

            entity.Property(e => e.SiniestroPk).HasColumnName("Siniestro_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.DetallesSiniestroPk).HasColumnName("DetallesSiniestro_PK");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaIntervencion).HasColumnType("datetime");
            entity.Property(e => e.OrderCompany)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TipoIntervencionPk).HasColumnName("TipoIntervencion_PK");
            entity.Property(e => e.TipoProfesional)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DetallesSiniestroPkNavigation).WithMany(p => p.Siniestros)
                .HasForeignKey(d => d.DetallesSiniestroPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SINIESTRO_DETALLES_SINIESTRO");

            entity.HasOne(d => d.TipoIntervencionPkNavigation).WithMany(p => p.Siniestros)
                .HasForeignKey(d => d.TipoIntervencionPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SINIESTRO_TIPOS_INTERVENCIONES");
        });

        modelBuilder.Entity<Telefono>(entity =>
        {
            entity.HasKey(e => e.TelefonoPk).HasName("PK__Telefeno__3D3D200E29C41665");

            entity.ToTable("TELEFONO");

            entity.Property(e => e.TelefonoPk).HasColumnName("Telefono_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HorarioPreferenciaLlamada)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("HorarioPreferenciaLLamada");
            entity.Property(e => e.NumeroTelefono)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Prefijo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TiposCliente>(entity =>
        {
            entity.HasKey(e => e.TipoClientePk);

            entity.ToTable("TIPOS_CLIENTES");

            entity.Property(e => e.TipoClientePk).HasColumnName("TipoCliente_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.Descripcion).IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TiposIntervencione>(entity =>
        {
            entity.HasKey(e => e.TipoIntervencionPk).HasName("PK__TIPOS_IN__36F897E8BF3DAE60");

            entity.ToTable("TIPOS_INTERVENCIONES");

            entity.Property(e => e.TipoIntervencionPk).HasColumnName("TipoIntervencion_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.CodigoActuacion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.NombreActuacion)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Trabajo>(entity =>
        {
            entity.HasKey(e => e.TrabajoPk);

            entity.ToTable("TRABAJOS");

            entity.Property(e => e.TrabajoPk).HasColumnName("Trabajo_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.Daños).IsUnicode(false);
            entity.Property(e => e.Descripcion).IsUnicode(false);
            entity.Property(e => e.Dnifirma)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DNIFirma");
            entity.Property(e => e.EstadoTrabajoPk).HasColumnName("EstadoTrabajo_PK");
            entity.Property(e => e.FechaAsignada).HasColumnType("datetime");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaEjecucion).HasColumnType("datetime");
            entity.Property(e => e.ObraPk).HasColumnName("Obra_PK");
            entity.Property(e => e.SiniestroPk).HasColumnName("Siniestro_PK");
            entity.Property(e => e.UgestorPk).HasColumnName("UGestor_PK");
            entity.Property(e => e.UoperarioPk).HasColumnName("UOperario_PK");

            entity.HasOne(d => d.EstadoTrabajoPkNavigation).WithMany(p => p.Trabajos)
                .HasForeignKey(d => d.EstadoTrabajoPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRABAJOS_ESTADOS_TRABAJOS");

            entity.HasOne(d => d.ObraPkNavigation).WithMany(p => p.Trabajos)
                .HasForeignKey(d => d.ObraPk)
                .HasConstraintName("FK_TRABAJOS_OBRAS");

            entity.HasOne(d => d.SiniestroPkNavigation).WithMany(p => p.Trabajos)
                .HasForeignKey(d => d.SiniestroPk)
                .HasConstraintName("FK_TRABAJOS_SINIESTRO");

            entity.HasOne(d => d.UgestorPkNavigation).WithMany(p => p.TrabajoUgestorPkNavigations)
                .HasForeignKey(d => d.UgestorPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRABAJOS_USUARIOS");

            entity.HasOne(d => d.UoperarioPkNavigation).WithMany(p => p.TrabajoUoperarioPkNavigations)
                .HasForeignKey(d => d.UoperarioPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRABAJOS_USUARIOS1");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.UsuarioPk);

            entity.ToTable("USUARIOS");

            entity.Property(e => e.UsuarioPk).HasColumnName("Usuario_PK");
            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.Apellidos)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Contrasena)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RolPk).HasColumnName("Rol_PK");
            entity.Property(e => e.Usuario1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Usuario");

            entity.HasOne(d => d.RolPkNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.RolPk)
                .HasConstraintName("FK_USUARIOS_ROLES");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}